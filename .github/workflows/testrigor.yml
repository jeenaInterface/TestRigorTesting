name: testRigor

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  api_call_job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Convert test cases to JSON
        id: convert_test_cases_to_json
        run: |
          set -e
          yaml_folder="test-cases" # Ensure this matches the actual folder name
          combined_json='{"baselineMutations": []}'
          for yaml_file in "$yaml_folder"/*.yaml; do
              if [ -f "$yaml_file" ]; then
                  json_content=$(yq eval -o=json "$yaml_file")
                  file_name=$(basename "$yaml_file")
                  file_name="${file_name%.yaml}"
                  json_content=$(jq --arg name "$file_name" '. + {description: $name}' <<<"$json_content")
                  combined_json=$(jq --argjson content "$json_content" '.baselineMutations += [$content]' <<< "$combined_json")
              else
                  echo "No YAML files found in $yaml_folder"
              fi
          done
          echo $combined_json

      - name: Trigger TestRigor retest
        run: |
          set -e
          response=$(curl -X POST \
            -H 'Content-type: application/json' \
            -H 'auth-token: 9fa027d7-c166-4554-b2cb-59a0def5909c' \
            --data '{"forceCancelPreviousTesting":true,"storedValues":{"storedValueName1":"Value"}}' \
            https://api.testrigor.com/api/v1/apps/LKDF2PJMtykwtFNp6/retest)
          echo "Response: $response"

      - name: Check TestRigor retest status
        run: |
          set -e
          sleep 10
          while true; do
            echo " "
            echo "==================================="
            echo " Checking TestRigor retest"
            echo "==================================="
            response=$(curl -i -o - -s -X GET 'https://api.testrigor.com/api/v1/apps/LKDF2PJMtykwtFNp6/status' -H 'auth-token: 9fa027d7-c166-4554-b2cb-59a0def5909c' -H 'Accept: application/json')
            code=$(echo "$response" | grep HTTP | awk '{print $2}')
            body=$(echo "$response" | sed -n '/{/,/}/p')
            echo "Status code: $code"
            echo "Response: $body"
            case $code in
              4*|5*)
                echo "Error calling API"
                exit 1
                ;;
              200)
                echo "Test finished successfully"
                exit 0
                ;;
              227|228)
                echo "Test is not finished yet"
                ;;
              230)
                echo "Test finished but failed"
                exit 1
                ;;
              *)
                echo "Unknown status"
                exit 1
            esac
            sleep 10
          done
